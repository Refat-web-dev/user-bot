from pyrogram import Client, filters
import random
import requests
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import time
import re

# –í–∞—à API ID –∏ API hash, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å my.telegram.org
api_id = "28307530"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API ID
api_hash = "1b5a6938325b67dc9d40cd3310d15064"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API hash

# –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
phone_number = "+998915196670"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

# –í–∞—à Telegram ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789)
my_user_id = 366194347  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram
app = Client("my_user", api_id=api_id, api_hash=api_hash, phone_number=phone_number)

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
commands_list = """
/weather <–≥–æ—Ä–æ–¥> - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ
/random_meme - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º
/get_members - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/random <num> - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/list - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/pasta <text> - –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ
/emodzi - chekay bratishka
"""
# –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_authorized(user_id):
    return user_id == my_user_id

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É
@app.on_message(filters.command("weather"))
async def get_weather(client, message):
    if not is_authorized(message.from_user.id):
        return

    try:
        city = message.text.split(" ", 1)[1]  # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        api_key = "ec0fbd1cf7ba5f1eee7ed1a19010480f"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á API OpenWeatherMap
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if data.get("cod") != 200:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –æ—Ç OpenWeatherMap
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '{city}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        weather = data['weather'][0]['description']
        temp = data['main']['temp']
        await message.reply(f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {weather}, {temp}¬∞C")
    except IndexError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–ºa
@app.on_message(filters.command("random_meme"))
async def send_random_meme(client, message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º –∏–∑ Tenor API
        api_key = "LIVDSRZULELA"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á API
        url = f"https://api.tenor.com/v1/search?q=random&key={api_key}&limit=10"  # –ó–∞–ø—Ä–æ—Å–∏–º 10 –º–µ–º–æ–≤
        response = requests.get(url)
        data = response.json()
        
        if not data['results']:  # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º—ã.")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        meme_url = random.choice(data['results'])['media'][0]['gif']['url']
        await message.reply(meme_url)
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@app.on_message(filters.command("get_members"))
async def get_all_members(client, message):
    if not is_authorized(message.from_user.id):
        return

    chat_id = message.chat.id
    members = []
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    async for member in app.get_chat_members(chat_id):
        username = member.user.username
        first_name = member.user.first_name
        user_id = member.user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –∏–ª–∏ first_name –Ω–µ —è–≤–ª—è—é—Ç—Å—è None
        if username:
            members.append(f"@{username}")
        elif first_name:
            members.append(f"{first_name} (ID: {user_id})")
        else:
            members.append(f"–ë–µ–∑ –∏–º–µ–Ω–∏ (ID: {user_id})")

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    max_message_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    members_text = "\n".join(members)
    for i in range(0, len(members_text), max_message_length):
        await message.reply(members_text[i:i+max_message_length])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@app.on_message(filters.command("random"))
async def random_members(client, message):
    if not is_authorized(message.from_user.id):
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /random <num>
    try:
        num = int(message.text.split()[1])  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    except (IndexError, ValueError):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /random 5).")
        return

    chat_id = message.chat.id
    members = []
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    async for member in app.get_chat_members(chat_id):  
        username = member.user.username
        first_name = member.user.first_name
        user_id = member.user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –∏ @Refat_web_dev
        if username == "Refat_web_dev" or member.user.is_bot:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –∏–ª–∏ first_name –Ω–µ —è–≤–ª—è—é—Ç—Å—è None
        if username:
            members.append(f"@{username}")
        elif first_name:
            members.append(f"{first_name} (ID: {user_id})")
        else:
            members.append(f"–ë–µ–∑ –∏–º–µ–Ω–∏ (ID: {user_id})")
    
    # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö
    if num > len(members):
        num = len(members)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    random_members = random.sample(members, num)
    random_members_text = "\n".join(random_members)

    await message.reply(random_members_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
@app.on_message(filters.command("list"))
async def list_commands(client, message):
    if not is_authorized(message.from_user.id):
        return

    await message.reply(commands_list)

@app.on_message(filters.command("pasta"))
async def pasta(client, message):
    if not is_authorized(message.from_user.id):
        return

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏
        command_parts = message.text.split(" ", 1)
        
        if len(command_parts) < 2:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞—Å—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /pasta Hello")
            return
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
        loop_count = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞
        text = command_parts[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ loop
        loop_match = re.match(r"loop\((\d+)\)\s*(.*)", text)
        if loop_match:
            loop_count = int(loop_match.group(1))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            text = loop_match.group(2)  # –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ loop

        current_text = ""  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        words = text.split(" ")  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞
        
        for _ in range(loop_count):  # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–æ –≤ loop
            for word in words:
                for i in range(1, len(word) + 1):
                    new_text = current_text + word[:i]
                    if new_text != message.text:
                        await message.edit(text=new_text)  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±—É–∫–≤–∞–º–∏
                current_text += word + " "  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ —Å –ø—Ä–æ–±–µ–ª–æ–º
                time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–≤–æ–º
            current_text = ""  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞

    except IndexError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /pasta Hello")

# –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ Telegram
emojis_list = [
    "üòÄ", "üòÅ", "üòÇ", "ü§£", "üòÉ", "üòÑ", "üòÖ", "üòÜ", "üòá", "üòà", "üòâ", "üòä", "üòã", "üòå", "üòç", "üòé", "üòè", "üòê", "üòë", 
    "üòí", "üòì", "üòî", "üòï", "üòñ", "üòó", "üòò", "üòô", "üòö", "üòõ", "üòú", "üòù", "üòû", "üòü", "üò†", "üò°", "üò¢", "üò≠", "üò§", 
    "üò•", "üò¶", "üòß", "üò®", "üò©", "üò™", "üò´", "üò¨", "üò≠", "üòÆ", "üòØ", "üò∞", "üò±", "üò≤", "üò≥", "üò¥", "üòµ", "üò∂", "üò∑", 
    "üò∏", "üòπ", "üò∫", "üòª", "üòº", "üòΩ", "üôÄ", "üôÅ", "üôÇ", "üôÉ", "ü§ó", "ü§î", "ü§ê", "ü§®", "ü§©", "ü§™", "ü§´", "ü§¨", "ü§Ø"
]

@app.on_message(filters.command("emodzi"))
async def emodzi(client, message):
    if not is_authorized(message.from_user.id):
        return

    try:
        # –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
        for emoji in emojis_list:
            await message.edit(text=emoji)  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —ç–º–æ–¥–∑–∏
            time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —ç–º–æ–¥–∑–∏

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
app.run()
